<?php echo '<?php'; ?>

namespace <?php echo $this->namespace; ?>;

use Contain\Entity\AbstractEntity;
use Contain\Entity\Property\Property;
use Zend\EventManager\Event;
use Zend\EventManager\EventManager;

/**
 * <?php echo $this->name; ?> Entity (auto-generated by the Contain module)
 *
 * This instance should not be edited directly. Edit the definition file instead
 * and recompile.
 */
class <?php echo $this->name; ?> extends AbstractEntity<?php
    if ($this->implementors): ?> implements <?php echo implode(', ', $this->implementors); endif; ?>

{
<?php if ($this->filter): ?>
    protected $inputFilter = '<?php echo $this->filter; ?>';
    protected $messages = array();

<?php endif; ?>
    /**
     * Initializes the properties of this entity.
     *
     * @return  $this
     */
    public function init()
    {
<?php foreach ($this->properties as $name => $property): ?>
<?php if ($options = $property->getOptions() + $property->getType()->getOptions()): ?>
        $this->properties['<?php echo $name; ?>'] = array('type' => '\<?php echo get_class($property->getType()); ?>', 'options' => <?php var_export($options); ?>);
<?php else: ?>
        $this->properties['<?php echo $name; ?>'] = array('type' => '\<?php echo get_class($property->getType()); ?>');
<?php endif; ?>
<?php endforeach; ?>
<?php echo $this->init; ?>
    }

<?php foreach ($this->properties as $name => $property): ?>
    /**
     * Accessor getter for the <?php echo $name; ?> property
     *
     * @return  See: <?php echo get_class($property->getType()); ?>::getValue()
     */
    public function get<?php echo ucfirst($name); ?>()
    {
        return $this->get('<?php echo $name; ?>');
    }

    /**
     * Accessor setter for the <?php echo $name; ?> property
     *
     * @param   See: <?php echo get_class($property->getType()); ?>::parse()
     * @return  $this
     */
    public function set<?php echo ucfirst($name); ?>($value)
    {
        return $this->set('<?php echo $name; ?>', $value);
    }

    /**
     * Accessor existence checker for the <?php echo $name; ?> property
     *
     * @return  boolean
     */
    public function has<?php echo ucfirst($name); ?>()
    {
        $property = $this->property('<?php echo $name; ?>');
        return !($property->isUnset() || $property->isEmpty());
    }
<?php endforeach; ?>

